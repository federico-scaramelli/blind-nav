//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputScripts/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""SoundsFeedbackActionMap"",
            ""id"": ""71ad9af2-ae77-40f9-be1e-bf9e4222f59d"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""017eeea6-6201-44d6-949b-f21c22a90231"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Repeat"",
                    ""type"": ""Button"",
                    ""id"": ""b61e60fe-78fb-46ea-92e8-13f014c444eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9e6da659-bdcd-44fd-9a7d-adbfa9804e3c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96728c20-7c7a-4a7e-92ef-b15a1c3e47d0"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f08f3b9-338e-44dc-aafd-22eaf6821a58"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""Repeat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd7cf0e3-8f2b-47ed-8728-1af167f8c2a9"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Repeat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterActionMap"",
            ""id"": ""b44f1b74-920c-420a-a45b-5fbf1cbcfb46"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""00e33f65-4e98-49bf-8940-83cae83db111"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""939e0c57-d72d-40f7-ae96-4d830249c422"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ResetToTarget"",
                    ""type"": ""Button"",
                    ""id"": ""49ca45a8-642c-40a1-b005-fab2adfd0df7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0d42f9dc-9b2c-4e2b-9cc3-9137332a1947"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9e40232f-54f9-40e4-b0c8-00095af0286b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""36b7089d-b24b-4f82-8d78-9f3797bb1483"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""824d07f4-c597-4dc9-850a-0a8be7e8a7f8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""57fe93b2-ec10-4d36-86c6-8c24ed429b05"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b8a50479-3fe1-445f-a68d-9ed07ab4d5ab"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5e6bbdf-e8a0-4a5e-9e09-4c0d2c57fcd8"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1b46042-96bf-4ee1-a990-7e9ee1127dd9"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a24feb7-5de8-4152-ae0d-143db2cd5ade"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Hold(duration=0.5,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""ResetToTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c7587e7-72ae-4e00-94f7-e13e9dc7c357"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": ""Hold(duration=0.5,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ResetToTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BlackMaskMap"",
            ""id"": ""0e536b0a-1b4e-43bb-87b9-e2e4f53b93a7"",
            ""actions"": [
                {
                    ""name"": ""BlackMask"",
                    ""type"": ""Button"",
                    ""id"": ""3ca5c0a8-6091-4188-9b0d-407447436f2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73bdede9-6e22-4448-a00e-750645e30d90"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Hold(duration=2,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BlackMask"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bda8054-3f34-4da9-8081-ab1f9a10eff0"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Hold(duration=2,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""BlackMask"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VolumeControlMap"",
            ""id"": ""61476168-7558-41df-bc5f-7f682d287be5"",
            ""actions"": [
                {
                    ""name"": ""VolumeUp"",
                    ""type"": ""Button"",
                    ""id"": ""994a2396-1734-4d4e-a84f-6f1a0bdc4440"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VolumeDown"",
                    ""type"": ""Button"",
                    ""id"": ""4cf83ceb-7f69-4a2e-acc7-b5bef3e3b4b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousVolume"",
                    ""type"": ""Button"",
                    ""id"": ""7c5b5538-2568-4abf-aebf-cb6f6403c990"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextVolume"",
                    ""type"": ""Button"",
                    ""id"": ""3ac0678a-c256-4d49-a193-4117f25808f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5f2dafc-08fe-417e-8d1a-8421b60fce33"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""VolumeUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78b4cb6e-522b-49be-91c4-0d0eebe1d528"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""VolumeUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d804f15f-1182-4a4d-b74d-ca4612b0f795"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""VolumeDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70a896b7-f1f8-403c-a4dd-c0fd98f0cc5b"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""VolumeDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07281866-703b-4ef7-acbc-00431d5a9165"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""PreviousVolume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76fc928c-d25b-4c60-a7e9-d3ed631d0f2a"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""PreviousVolume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15699dca-5e00-42d0-aeea-7fcc39d91605"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""NextVolume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1959029-71fb-46c7-b39f-ce24fd57ff42"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NextVolume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""StartMap"",
            ""id"": ""5d723862-9e90-49a6-8bf1-91db8ad8d7bf"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""0e14ec46-f642-46b1-ac18-3c8b2d50918f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07cea94e-853f-40fa-a544-a82f895c4634"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8723751-e423-42f6-9d1f-75850ed3c9ef"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bd9bf20-4d77-4845-b995-233bda2ffa5b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f24bef41-1f60-44ec-9701-b9f88ffbbd4a"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e2bcad6-9aaa-4cc2-a258-0bc08acfb306"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77a17c12-8992-4791-91cb-92489408cbe4"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a48d4eb-7ae5-410b-a3a2-409ba6e2ac89"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d03149a-1863-4529-9e08-b7f6e5e2c17b"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62fb229a-588c-4fdc-9709-30175c3b856d"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f419e1eb-1036-4a59-b3dc-2bf0336af0fb"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d9e111a-41d3-4ae0-9d82-d9ef040250dc"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5e90bde-3d09-4535-8843-a597cc1cf788"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3161a23f-2d17-494a-9bdb-5b72d681e80b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21c05ccc-05bf-4b24-b58b-181dedbf06d1"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78a9c2c7-c382-4011-ae20-564e153ec99d"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b63ee53-f31b-4b5a-ae7a-3eeedc19a56a"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0d09968-3495-4641-a528-4597ef7d901d"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37676173-aead-41f4-9038-c9aeee5583b2"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64f1e994-f0db-44c1-929d-d79de7eb2871"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a53f7a32-857e-4782-9e79-628cbee8c365"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f6124d0-4276-4b0b-86ee-36a8d5ff3f85"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a22bc73d-e770-4b58-a22f-9b4a155e2558"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1acf4412-38c5-4a55-b7fa-96bbd07bf74d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameSessionControlMap"",
            ""id"": ""c629a5dd-5cec-43c3-904b-bdc854a1b94a"",
            ""actions"": [
                {
                    ""name"": ""SkipTutorial"",
                    ""type"": ""Button"",
                    ""id"": ""12d43bef-04c5-45c0-b1dc-3e527c0e55cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""49297052-c05b-4fe8-9c9e-6f86fa3380ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8af69011-d1ae-4e90-8b35-d8cb69ff7507"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Hold(duration=1,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d9af0cb-74ab-466a-a09a-d5c8b2d51e49"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": ""Hold(duration=1,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1e024c2-f7dc-4e3f-82ab-eaef8b5350d4"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": ""Hold(duration=1.5,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""SkipTutorial"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99185ab8-bbdb-482c-84ab-b74bec2d9a19"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": ""Hold(duration=1.5,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SkipTutorial"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""M&K"",
            ""bindingGroup"": ""M&K"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SoundsFeedbackActionMap
        m_SoundsFeedbackActionMap = asset.FindActionMap("SoundsFeedbackActionMap", throwIfNotFound: true);
        m_SoundsFeedbackActionMap_Confirm = m_SoundsFeedbackActionMap.FindAction("Confirm", throwIfNotFound: true);
        m_SoundsFeedbackActionMap_Repeat = m_SoundsFeedbackActionMap.FindAction("Repeat", throwIfNotFound: true);
        // CharacterActionMap
        m_CharacterActionMap = asset.FindActionMap("CharacterActionMap", throwIfNotFound: true);
        m_CharacterActionMap_Move = m_CharacterActionMap.FindAction("Move", throwIfNotFound: true);
        m_CharacterActionMap_Rotate = m_CharacterActionMap.FindAction("Rotate", throwIfNotFound: true);
        m_CharacterActionMap_ResetToTarget = m_CharacterActionMap.FindAction("ResetToTarget", throwIfNotFound: true);
        // BlackMaskMap
        m_BlackMaskMap = asset.FindActionMap("BlackMaskMap", throwIfNotFound: true);
        m_BlackMaskMap_BlackMask = m_BlackMaskMap.FindAction("BlackMask", throwIfNotFound: true);
        // VolumeControlMap
        m_VolumeControlMap = asset.FindActionMap("VolumeControlMap", throwIfNotFound: true);
        m_VolumeControlMap_VolumeUp = m_VolumeControlMap.FindAction("VolumeUp", throwIfNotFound: true);
        m_VolumeControlMap_VolumeDown = m_VolumeControlMap.FindAction("VolumeDown", throwIfNotFound: true);
        m_VolumeControlMap_PreviousVolume = m_VolumeControlMap.FindAction("PreviousVolume", throwIfNotFound: true);
        m_VolumeControlMap_NextVolume = m_VolumeControlMap.FindAction("NextVolume", throwIfNotFound: true);
        // StartMap
        m_StartMap = asset.FindActionMap("StartMap", throwIfNotFound: true);
        m_StartMap_StartGame = m_StartMap.FindAction("StartGame", throwIfNotFound: true);
        // GameSessionControlMap
        m_GameSessionControlMap = asset.FindActionMap("GameSessionControlMap", throwIfNotFound: true);
        m_GameSessionControlMap_SkipTutorial = m_GameSessionControlMap.FindAction("SkipTutorial", throwIfNotFound: true);
        m_GameSessionControlMap_Quit = m_GameSessionControlMap.FindAction("Quit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SoundsFeedbackActionMap
    private readonly InputActionMap m_SoundsFeedbackActionMap;
    private ISoundsFeedbackActionMapActions m_SoundsFeedbackActionMapActionsCallbackInterface;
    private readonly InputAction m_SoundsFeedbackActionMap_Confirm;
    private readonly InputAction m_SoundsFeedbackActionMap_Repeat;
    public struct SoundsFeedbackActionMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public SoundsFeedbackActionMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Confirm => m_Wrapper.m_SoundsFeedbackActionMap_Confirm;
        public InputAction @Repeat => m_Wrapper.m_SoundsFeedbackActionMap_Repeat;
        public InputActionMap Get() { return m_Wrapper.m_SoundsFeedbackActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SoundsFeedbackActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ISoundsFeedbackActionMapActions instance)
        {
            if (m_Wrapper.m_SoundsFeedbackActionMapActionsCallbackInterface != null)
            {
                @Confirm.started -= m_Wrapper.m_SoundsFeedbackActionMapActionsCallbackInterface.OnConfirm;
                @Confirm.performed -= m_Wrapper.m_SoundsFeedbackActionMapActionsCallbackInterface.OnConfirm;
                @Confirm.canceled -= m_Wrapper.m_SoundsFeedbackActionMapActionsCallbackInterface.OnConfirm;
                @Repeat.started -= m_Wrapper.m_SoundsFeedbackActionMapActionsCallbackInterface.OnRepeat;
                @Repeat.performed -= m_Wrapper.m_SoundsFeedbackActionMapActionsCallbackInterface.OnRepeat;
                @Repeat.canceled -= m_Wrapper.m_SoundsFeedbackActionMapActionsCallbackInterface.OnRepeat;
            }
            m_Wrapper.m_SoundsFeedbackActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @Repeat.started += instance.OnRepeat;
                @Repeat.performed += instance.OnRepeat;
                @Repeat.canceled += instance.OnRepeat;
            }
        }
    }
    public SoundsFeedbackActionMapActions @SoundsFeedbackActionMap => new SoundsFeedbackActionMapActions(this);

    // CharacterActionMap
    private readonly InputActionMap m_CharacterActionMap;
    private ICharacterActionMapActions m_CharacterActionMapActionsCallbackInterface;
    private readonly InputAction m_CharacterActionMap_Move;
    private readonly InputAction m_CharacterActionMap_Rotate;
    private readonly InputAction m_CharacterActionMap_ResetToTarget;
    public struct CharacterActionMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public CharacterActionMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterActionMap_Move;
        public InputAction @Rotate => m_Wrapper.m_CharacterActionMap_Rotate;
        public InputAction @ResetToTarget => m_Wrapper.m_CharacterActionMap_ResetToTarget;
        public InputActionMap Get() { return m_Wrapper.m_CharacterActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActionMapActions instance)
        {
            if (m_Wrapper.m_CharacterActionMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnRotate;
                @ResetToTarget.started -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnResetToTarget;
                @ResetToTarget.performed -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnResetToTarget;
                @ResetToTarget.canceled -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnResetToTarget;
            }
            m_Wrapper.m_CharacterActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @ResetToTarget.started += instance.OnResetToTarget;
                @ResetToTarget.performed += instance.OnResetToTarget;
                @ResetToTarget.canceled += instance.OnResetToTarget;
            }
        }
    }
    public CharacterActionMapActions @CharacterActionMap => new CharacterActionMapActions(this);

    // BlackMaskMap
    private readonly InputActionMap m_BlackMaskMap;
    private IBlackMaskMapActions m_BlackMaskMapActionsCallbackInterface;
    private readonly InputAction m_BlackMaskMap_BlackMask;
    public struct BlackMaskMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public BlackMaskMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @BlackMask => m_Wrapper.m_BlackMaskMap_BlackMask;
        public InputActionMap Get() { return m_Wrapper.m_BlackMaskMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BlackMaskMapActions set) { return set.Get(); }
        public void SetCallbacks(IBlackMaskMapActions instance)
        {
            if (m_Wrapper.m_BlackMaskMapActionsCallbackInterface != null)
            {
                @BlackMask.started -= m_Wrapper.m_BlackMaskMapActionsCallbackInterface.OnBlackMask;
                @BlackMask.performed -= m_Wrapper.m_BlackMaskMapActionsCallbackInterface.OnBlackMask;
                @BlackMask.canceled -= m_Wrapper.m_BlackMaskMapActionsCallbackInterface.OnBlackMask;
            }
            m_Wrapper.m_BlackMaskMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BlackMask.started += instance.OnBlackMask;
                @BlackMask.performed += instance.OnBlackMask;
                @BlackMask.canceled += instance.OnBlackMask;
            }
        }
    }
    public BlackMaskMapActions @BlackMaskMap => new BlackMaskMapActions(this);

    // VolumeControlMap
    private readonly InputActionMap m_VolumeControlMap;
    private IVolumeControlMapActions m_VolumeControlMapActionsCallbackInterface;
    private readonly InputAction m_VolumeControlMap_VolumeUp;
    private readonly InputAction m_VolumeControlMap_VolumeDown;
    private readonly InputAction m_VolumeControlMap_PreviousVolume;
    private readonly InputAction m_VolumeControlMap_NextVolume;
    public struct VolumeControlMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public VolumeControlMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @VolumeUp => m_Wrapper.m_VolumeControlMap_VolumeUp;
        public InputAction @VolumeDown => m_Wrapper.m_VolumeControlMap_VolumeDown;
        public InputAction @PreviousVolume => m_Wrapper.m_VolumeControlMap_PreviousVolume;
        public InputAction @NextVolume => m_Wrapper.m_VolumeControlMap_NextVolume;
        public InputActionMap Get() { return m_Wrapper.m_VolumeControlMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VolumeControlMapActions set) { return set.Get(); }
        public void SetCallbacks(IVolumeControlMapActions instance)
        {
            if (m_Wrapper.m_VolumeControlMapActionsCallbackInterface != null)
            {
                @VolumeUp.started -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnVolumeUp;
                @VolumeUp.performed -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnVolumeUp;
                @VolumeUp.canceled -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnVolumeUp;
                @VolumeDown.started -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnVolumeDown;
                @VolumeDown.performed -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnVolumeDown;
                @VolumeDown.canceled -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnVolumeDown;
                @PreviousVolume.started -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnPreviousVolume;
                @PreviousVolume.performed -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnPreviousVolume;
                @PreviousVolume.canceled -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnPreviousVolume;
                @NextVolume.started -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnNextVolume;
                @NextVolume.performed -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnNextVolume;
                @NextVolume.canceled -= m_Wrapper.m_VolumeControlMapActionsCallbackInterface.OnNextVolume;
            }
            m_Wrapper.m_VolumeControlMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @VolumeUp.started += instance.OnVolumeUp;
                @VolumeUp.performed += instance.OnVolumeUp;
                @VolumeUp.canceled += instance.OnVolumeUp;
                @VolumeDown.started += instance.OnVolumeDown;
                @VolumeDown.performed += instance.OnVolumeDown;
                @VolumeDown.canceled += instance.OnVolumeDown;
                @PreviousVolume.started += instance.OnPreviousVolume;
                @PreviousVolume.performed += instance.OnPreviousVolume;
                @PreviousVolume.canceled += instance.OnPreviousVolume;
                @NextVolume.started += instance.OnNextVolume;
                @NextVolume.performed += instance.OnNextVolume;
                @NextVolume.canceled += instance.OnNextVolume;
            }
        }
    }
    public VolumeControlMapActions @VolumeControlMap => new VolumeControlMapActions(this);

    // StartMap
    private readonly InputActionMap m_StartMap;
    private IStartMapActions m_StartMapActionsCallbackInterface;
    private readonly InputAction m_StartMap_StartGame;
    public struct StartMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public StartMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_StartMap_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_StartMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StartMapActions set) { return set.Get(); }
        public void SetCallbacks(IStartMapActions instance)
        {
            if (m_Wrapper.m_StartMapActionsCallbackInterface != null)
            {
                @StartGame.started -= m_Wrapper.m_StartMapActionsCallbackInterface.OnStartGame;
                @StartGame.performed -= m_Wrapper.m_StartMapActionsCallbackInterface.OnStartGame;
                @StartGame.canceled -= m_Wrapper.m_StartMapActionsCallbackInterface.OnStartGame;
            }
            m_Wrapper.m_StartMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
            }
        }
    }
    public StartMapActions @StartMap => new StartMapActions(this);

    // GameSessionControlMap
    private readonly InputActionMap m_GameSessionControlMap;
    private IGameSessionControlMapActions m_GameSessionControlMapActionsCallbackInterface;
    private readonly InputAction m_GameSessionControlMap_SkipTutorial;
    private readonly InputAction m_GameSessionControlMap_Quit;
    public struct GameSessionControlMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public GameSessionControlMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkipTutorial => m_Wrapper.m_GameSessionControlMap_SkipTutorial;
        public InputAction @Quit => m_Wrapper.m_GameSessionControlMap_Quit;
        public InputActionMap Get() { return m_Wrapper.m_GameSessionControlMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameSessionControlMapActions set) { return set.Get(); }
        public void SetCallbacks(IGameSessionControlMapActions instance)
        {
            if (m_Wrapper.m_GameSessionControlMapActionsCallbackInterface != null)
            {
                @SkipTutorial.started -= m_Wrapper.m_GameSessionControlMapActionsCallbackInterface.OnSkipTutorial;
                @SkipTutorial.performed -= m_Wrapper.m_GameSessionControlMapActionsCallbackInterface.OnSkipTutorial;
                @SkipTutorial.canceled -= m_Wrapper.m_GameSessionControlMapActionsCallbackInterface.OnSkipTutorial;
                @Quit.started -= m_Wrapper.m_GameSessionControlMapActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_GameSessionControlMapActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_GameSessionControlMapActionsCallbackInterface.OnQuit;
            }
            m_Wrapper.m_GameSessionControlMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SkipTutorial.started += instance.OnSkipTutorial;
                @SkipTutorial.performed += instance.OnSkipTutorial;
                @SkipTutorial.canceled += instance.OnSkipTutorial;
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
            }
        }
    }
    public GameSessionControlMapActions @GameSessionControlMap => new GameSessionControlMapActions(this);
    private int m_MKSchemeIndex = -1;
    public InputControlScheme MKScheme
    {
        get
        {
            if (m_MKSchemeIndex == -1) m_MKSchemeIndex = asset.FindControlSchemeIndex("M&K");
            return asset.controlSchemes[m_MKSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ISoundsFeedbackActionMapActions
    {
        void OnConfirm(InputAction.CallbackContext context);
        void OnRepeat(InputAction.CallbackContext context);
    }
    public interface ICharacterActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnResetToTarget(InputAction.CallbackContext context);
    }
    public interface IBlackMaskMapActions
    {
        void OnBlackMask(InputAction.CallbackContext context);
    }
    public interface IVolumeControlMapActions
    {
        void OnVolumeUp(InputAction.CallbackContext context);
        void OnVolumeDown(InputAction.CallbackContext context);
        void OnPreviousVolume(InputAction.CallbackContext context);
        void OnNextVolume(InputAction.CallbackContext context);
    }
    public interface IStartMapActions
    {
        void OnStartGame(InputAction.CallbackContext context);
    }
    public interface IGameSessionControlMapActions
    {
        void OnSkipTutorial(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
    }
}
